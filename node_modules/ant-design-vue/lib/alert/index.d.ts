export declare const AlertProps: {
    /**
     * Type of Alert styles, options: `success`, `info`, `warning`, `error`
     */
    type: import("vue-types").VueTypeDef<"error" | "success" | "info" | "warning">;
    /** Whether Alert can be closed */
    closable: import("vue-types").VueTypeValidableDef<boolean>;
    /** Close text to show */
    closeText: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
    /** Content of Alert */
    message: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
    /** Additional content of Alert */
    description: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
    /** Callback when close Alert */
    /** Trigger when animation ending of Alert */
    afterClose: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    } & {
        default: (...args: any[]) => any;
    };
    /** Whether to show icon */
    showIcon: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    banner: import("vue-types").VueTypeValidableDef<boolean>;
    icon: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
    onClose: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
};
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            closing: boolean;
            closed: boolean;
        };
        $props: Partial<{
            prefixCls: string;
            afterClose: (...args: any[]) => any;
        }> & Pick<Readonly<{
            prefixCls: string;
            afterClose: (...args: any[]) => any;
        } & {
            icon?: import("../_util/type").VueNode;
            description?: import("../_util/type").VueNode;
            message?: import("../_util/type").VueNode;
            type?: "error" | "success" | "info" | "warning";
            closable?: boolean;
            closeText?: import("../_util/type").VueNode;
            showIcon?: boolean;
            banner?: boolean;
            onClose?: import("../_util/type").VueNode;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "icon" | "class" | "description" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "message" | "type" | "closable" | "closeText" | "showIcon" | "banner" | "onClose">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "close", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            afterClose: (...args: any[]) => any;
        } & {
            icon?: import("../_util/type").VueNode;
            description?: import("../_util/type").VueNode;
            message?: import("../_util/type").VueNode;
            type?: "error" | "success" | "info" | "warning";
            closable?: boolean;
            closeText?: import("../_util/type").VueNode;
            showIcon?: boolean;
            banner?: boolean;
            onClose?: import("../_util/type").VueNode;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            closing: boolean;
            closed: boolean;
        }, {}, {
            handleClose(e: Event): void;
            animationEnd(): void;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, "close"[], string, {
            prefixCls: string;
            afterClose: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        afterClose: (...args: any[]) => any;
    } & {
        icon?: import("../_util/type").VueNode;
        description?: import("../_util/type").VueNode;
        message?: import("../_util/type").VueNode;
        type?: "error" | "success" | "info" | "warning";
        closable?: boolean;
        closeText?: import("../_util/type").VueNode;
        showIcon?: boolean;
        banner?: boolean;
        onClose?: import("../_util/type").VueNode;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        closing: boolean;
        closed: boolean;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        handleClose(e: Event): void;
        animationEnd(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    afterClose: (...args: any[]) => any;
} & {
    icon?: import("../_util/type").VueNode;
    description?: import("../_util/type").VueNode;
    message?: import("../_util/type").VueNode;
    type?: "error" | "success" | "info" | "warning";
    closable?: boolean;
    closeText?: import("../_util/type").VueNode;
    showIcon?: boolean;
    banner?: boolean;
    onClose?: import("../_util/type").VueNode;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    closing: boolean;
    closed: boolean;
}, {}, {
    handleClose(e: Event): void;
    animationEnd(): void;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, "close"[], "close", {
    prefixCls: string;
    afterClose: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: import("vue").App<any>, ...options: any[]) => any) & {
    install?: (app: import("vue").App<any>, ...options: any[]) => any;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            closing: boolean;
            closed: boolean;
        };
        $props: Partial<{
            prefixCls: string;
            afterClose: (...args: any[]) => any;
        }> & Pick<Readonly<{
            prefixCls: string;
            afterClose: (...args: any[]) => any;
        } & {
            icon?: import("../_util/type").VueNode;
            description?: import("../_util/type").VueNode;
            message?: import("../_util/type").VueNode;
            type?: "error" | "success" | "info" | "warning";
            closable?: boolean;
            closeText?: import("../_util/type").VueNode;
            showIcon?: boolean;
            banner?: boolean;
            onClose?: import("../_util/type").VueNode;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "icon" | "class" | "description" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "message" | "type" | "closable" | "closeText" | "showIcon" | "banner" | "onClose">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "close", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            afterClose: (...args: any[]) => any;
        } & {
            icon?: import("../_util/type").VueNode;
            description?: import("../_util/type").VueNode;
            message?: import("../_util/type").VueNode;
            type?: "error" | "success" | "info" | "warning";
            closable?: boolean;
            closeText?: import("../_util/type").VueNode;
            showIcon?: boolean;
            banner?: boolean;
            onClose?: import("../_util/type").VueNode;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            closing: boolean;
            closed: boolean;
        }, {}, {
            handleClose(e: Event): void;
            animationEnd(): void;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, "close"[], string, {
            prefixCls: string;
            afterClose: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        afterClose: (...args: any[]) => any;
    } & {
        icon?: import("../_util/type").VueNode;
        description?: import("../_util/type").VueNode;
        message?: import("../_util/type").VueNode;
        type?: "error" | "success" | "info" | "warning";
        closable?: boolean;
        closeText?: import("../_util/type").VueNode;
        showIcon?: boolean;
        banner?: boolean;
        onClose?: import("../_util/type").VueNode;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        closing: boolean;
        closed: boolean;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        handleClose(e: Event): void;
        animationEnd(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    afterClose: (...args: any[]) => any;
} & {
    icon?: import("../_util/type").VueNode;
    description?: import("../_util/type").VueNode;
    message?: import("../_util/type").VueNode;
    type?: "error" | "success" | "info" | "warning";
    closable?: boolean;
    closeText?: import("../_util/type").VueNode;
    showIcon?: boolean;
    banner?: boolean;
    onClose?: import("../_util/type").VueNode;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    closing: boolean;
    closed: boolean;
}, {}, {
    handleClose(e: Event): void;
    animationEnd(): void;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, "close"[], "close", {
    prefixCls: string;
    afterClose: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: import("vue").App<any>, ...options: any[]) => any;
});
export default _default;
