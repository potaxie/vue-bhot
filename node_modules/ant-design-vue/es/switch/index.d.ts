declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
        }> & Pick<Readonly<{
            prefixCls: string;
        } & {
            size?: "default" | "small" | "large";
            disabled?: boolean;
            autofocus?: boolean;
            tabindex?: import("../_util/type").Key;
            loading?: boolean;
            defaultChecked?: boolean;
            checked?: boolean;
            checkedChildren?: any;
            unCheckedChildren?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "size" | "disabled" | "autofocus" | "tabindex" | "loading" | "defaultChecked" | "checked" | "checkedChildren" | "unCheckedChildren">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
        } & {
            size?: "default" | "small" | "large";
            disabled?: boolean;
            autofocus?: boolean;
            tabindex?: import("../_util/type").Key;
            loading?: boolean;
            defaultChecked?: boolean;
            checked?: boolean;
            checkedChildren?: any;
            unCheckedChildren?: any;
        }>, {
            refSwitchNode: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            focus(): void;
            blur(): void;
            saveRef(c: any): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
    } & {
        size?: "default" | "small" | "large";
        disabled?: boolean;
        autofocus?: boolean;
        tabindex?: import("../_util/type").Key;
        loading?: boolean;
        defaultChecked?: boolean;
        checked?: boolean;
        checkedChildren?: any;
        unCheckedChildren?: any;
    }> & import("vue").ShallowUnwrapRef<{
        refSwitchNode: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {
        focus(): void;
        blur(): void;
        saveRef(c: any): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
} & {
    size?: "default" | "small" | "large";
    disabled?: boolean;
    autofocus?: boolean;
    tabindex?: import("../_util/type").Key;
    loading?: boolean;
    defaultChecked?: boolean;
    checked?: boolean;
    checkedChildren?: any;
    unCheckedChildren?: any;
}>, {
    refSwitchNode: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    focus(): void;
    blur(): void;
    saveRef(c: any): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: import("vue").App<any>, ...options: any[]) => any) & {
    install?: (app: import("vue").App<any>, ...options: any[]) => any;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
        }> & Pick<Readonly<{
            prefixCls: string;
        } & {
            size?: "default" | "small" | "large";
            disabled?: boolean;
            autofocus?: boolean;
            tabindex?: import("../_util/type").Key;
            loading?: boolean;
            defaultChecked?: boolean;
            checked?: boolean;
            checkedChildren?: any;
            unCheckedChildren?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "size" | "disabled" | "autofocus" | "tabindex" | "loading" | "defaultChecked" | "checked" | "checkedChildren" | "unCheckedChildren">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
        } & {
            size?: "default" | "small" | "large";
            disabled?: boolean;
            autofocus?: boolean;
            tabindex?: import("../_util/type").Key;
            loading?: boolean;
            defaultChecked?: boolean;
            checked?: boolean;
            checkedChildren?: any;
            unCheckedChildren?: any;
        }>, {
            refSwitchNode: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            focus(): void;
            blur(): void;
            saveRef(c: any): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
    } & {
        size?: "default" | "small" | "large";
        disabled?: boolean;
        autofocus?: boolean;
        tabindex?: import("../_util/type").Key;
        loading?: boolean;
        defaultChecked?: boolean;
        checked?: boolean;
        checkedChildren?: any;
        unCheckedChildren?: any;
    }> & import("vue").ShallowUnwrapRef<{
        refSwitchNode: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {
        focus(): void;
        blur(): void;
        saveRef(c: any): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
} & {
    size?: "default" | "small" | "large";
    disabled?: boolean;
    autofocus?: boolean;
    tabindex?: import("../_util/type").Key;
    loading?: boolean;
    defaultChecked?: boolean;
    checked?: boolean;
    checkedChildren?: any;
    unCheckedChildren?: any;
}>, {
    refSwitchNode: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    focus(): void;
    blur(): void;
    saveRef(c: any): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: import("vue").App<any>, ...options: any[]) => any;
});
export default _default;
