declare const _default: import("vue").DefineComponent<{
    propsSymbol: import("vue-types").VueTypeValidableDef<any>;
    store: import("vue-types").VueTypeLooseShape<{
        setState: any;
        getState: any;
        subscribe: any;
    }>;
    locale: import("vue-types").VueTypeValidableDef<any>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    getCheckboxPropsByItem: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    getRecordKey: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    data: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    hideDefaultSelections: import("vue-types").VueTypeValidableDef<boolean>;
    selections: import("vue-types").VueTypeDef<boolean | unknown[]>;
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onSelect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, {
    defaultSelections: any[];
    unsubscribe: any;
}, {
    checked: any;
    indeterminate: boolean;
}, {}, {
    checkSelection(props: any, data: any, type: any, byDefaultChecked: any): any;
    setCheckState(props: any): void;
    handleSelectAllChange(e: any): void;
    subscribe(): void;
    renderMenus(selections: any): any;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    data: unknown[];
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    getCheckboxPropsByItem: (...args: any[]) => any;
    getRecordKey: (...args: any[]) => any;
} & {
    locale?: any;
    disabled?: boolean;
    selections?: boolean | unknown[];
    hideDefaultSelections?: boolean;
    store?: {
        setState: any;
        getState: any;
        subscribe: any;
    };
    propsSymbol?: any;
}>, {
    data: unknown[];
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    getCheckboxPropsByItem: (...args: any[]) => any;
    getRecordKey: (...args: any[]) => any;
}>;
export default _default;
